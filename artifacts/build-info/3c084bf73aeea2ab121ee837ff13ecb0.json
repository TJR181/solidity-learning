{
	"id": "3c084bf73aeea2ab121ee837ff13ecb0",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.4",
	"solcLongVersion": "0.6.4+commit.1dca32f3",
	"input": {
		"language": "Solidity",
		"sources": {
			"security/etheranut/Fallout/Fallout.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract Fallout {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) allocations;\r\n    address payable public owner;\r\n\r\n    /* constructor */\r\n    function Fal1out() public payable {\r\n        owner = msg.sender;\r\n        allocations[owner] = msg.value;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function allocate() public payable {\r\n        allocations[msg.sender] = allocations[msg.sender].add(msg.value);\r\n    }\r\n\r\n    function sendAllocation(address payable allocator) public {\r\n        require(allocations[allocator] > 0);\r\n        allocator.transfer(allocations[allocator]);\r\n    }\r\n\r\n    function collectAllocations() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function allocatorBalance(address allocator) public view returns (uint256) {\r\n        return allocations[allocator];\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n        /* \"--CODEGEN--\":12:13   */\n      0x00\n        /* \"--CODEGEN--\":9:10   */\n      dup1\n        /* \"--CODEGEN--\":2:14   */\n      revert\n\n    auxdata: 0xa26469706673582212207c39704fef177480d01bfd9d17366e2b82c634e6eba8594da1234ef439000d9b64736f6c63430006040033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c39704fef177480d01bfd9d17366e2b82c634e6eba8594da1234ef439000d9b64736f6c63430006040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x39704FEF177480D01BFD9D17366E2B82C634E6EBA8594DA1234EF43900 0xD SWAP12 PUSH5 0x736F6C6343 STOP MOD DIV STOP CALLER ",
							"sourceMap": "630:6594:0:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c39704fef177480d01bfd9d17366e2b82c634e6eba8594da1234ef439000d9b64736f6c63430006040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x39704FEF177480D01BFD9D17366E2B82C634E6EBA8594DA1234EF43900 0xD SWAP12 PUSH5 0x736F6C6343 STOP MOD DIV STOP CALLER ",
							"sourceMap": "630:6594:0:-:0;;;;;;12:1:-1;9;2:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"source": -1,
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3",
									"source": -1
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3",
									"source": -1
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3",
									"source": -1
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE",
									"source": -1
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"source": -1,
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ",
									"source": -1
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI",
									"source": -1
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID",
									"source": -1
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS",
									"source": -1
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"source": -1,
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2",
									"source": -1
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8",
									"source": -1
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3",
									"source": -1
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2",
									"source": -1
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN",
									"source": -1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207c39704fef177480d01bfd9d17366e2b82c634e6eba8594da1234ef439000d9b64736f6c63430006040033",
									".code": [
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12,
											"end": 13,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9,
											"end": 10,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 14,
											"name": "REVERT",
											"source": -1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.4+commit.1dca32f3\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"security/etheranut/Fallout/Fallout.sol": {
				"Fallout": {
					"abi": [
						{
							"inputs": [],
							"name": "Fal1out",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "allocatorBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectAllocations",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "sendAllocation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"security/etheranut/Fallout/Fallout.sol\":115:1056  contract Fallout {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":5:14   */\n  dup1\n    /* \"--CODEGEN--\":2:4   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":27:28   */\n  0x00\n    /* \"--CODEGEN--\":24:25   */\n  dup1\n    /* \"--CODEGEN--\":17:29   */\n  revert\n    /* \"--CODEGEN--\":2:4   */\ntag_1:\n    /* \"security/etheranut/Fallout/Fallout.sol\":115:1056  contract Fallout {\r... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"security/etheranut/Fallout/Fallout.sol\":115:1056  contract Fallout {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6fab5ddf\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x8aa96f38\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xa2dea26f\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xabaa9916\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xffd40b56\n      eq\n      tag_7\n      jumpi\n    tag_1:\n        /* \"--CODEGEN--\":12:13   */\n      0x00\n        /* \"--CODEGEN--\":9:10   */\n      dup1\n        /* \"--CODEGEN--\":2:14   */\n      revert\n        /* \"security/etheranut/Fallout/Fallout.sol\":280:392  function Fal1out() public payable {\r... */\n    tag_2:\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n      stop\n        /* \"security/etheranut/Fallout/Fallout.sol\":814:922  function collectAllocations() public onlyOwner {\r... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":5:14   */\n      dup1\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_10\n      jumpi\n        /* \"--CODEGEN--\":27:28   */\n      0x00\n        /* \"--CODEGEN--\":24:25   */\n      dup1\n        /* \"--CODEGEN--\":17:29   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_10:\n        /* \"security/etheranut/Fallout/Fallout.sol\":814:922  function collectAllocations() public onlyOwner {\r... */\n      pop\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      stop\n        /* \"security/etheranut/Fallout/Fallout.sol\":220:248  address payable public owner */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":5:14   */\n      dup1\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_13\n      jumpi\n        /* \"--CODEGEN--\":27:28   */\n      0x00\n        /* \"--CODEGEN--\":24:25   */\n      dup1\n        /* \"--CODEGEN--\":17:29   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_13:\n        /* \"security/etheranut/Fallout/Fallout.sol\":220:248  address payable public owner */\n      pop\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"security/etheranut/Fallout/Fallout.sol\":641:806  function sendAllocation(address payable allocator) public {\r... */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":5:14   */\n      dup1\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_16\n      jumpi\n        /* \"--CODEGEN--\":27:28   */\n      0x00\n        /* \"--CODEGEN--\":24:25   */\n      dup1\n        /* \"--CODEGEN--\":17:29   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_16:\n        /* \"security/etheranut/Fallout/Fallout.sol\":641:806  function sendAllocation(address payable allocator) public {\r... */\n      pop\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":15:17   */\n      0x20\n        /* \"--CODEGEN--\":10:13   */\n      dup2\n        /* \"--CODEGEN--\":7:18   */\n      lt\n        /* \"--CODEGEN--\":4:6   */\n      iszero\n      tag_18\n      jumpi\n        /* \"--CODEGEN--\":31:32   */\n      0x00\n        /* \"--CODEGEN--\":28:29   */\n      dup1\n        /* \"--CODEGEN--\":21:33   */\n      revert\n        /* \"--CODEGEN--\":4:6   */\n    tag_18:\n        /* \"security/etheranut/Fallout/Fallout.sol\":641:806  function sendAllocation(address payable allocator) public {\r... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_19\n      jump\t// in\n    tag_17:\n      stop\n        /* \"security/etheranut/Fallout/Fallout.sol\":515:633  function allocate() public payable {\r... */\n    tag_6:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      stop\n        /* \"security/etheranut/Fallout/Fallout.sol\":930:1053  function allocatorBalance(address allocator) public view returns (uint256) {\r... */\n    tag_7:\n      callvalue\n        /* \"--CODEGEN--\":5:14   */\n      dup1\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":27:28   */\n      0x00\n        /* \"--CODEGEN--\":24:25   */\n      dup1\n        /* \"--CODEGEN--\":17:29   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_22:\n        /* \"security/etheranut/Fallout/Fallout.sol\":930:1053  function allocatorBalance(address allocator) public view returns (uint256) {\r... */\n      pop\n      tag_23\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":15:17   */\n      0x20\n        /* \"--CODEGEN--\":10:13   */\n      dup2\n        /* \"--CODEGEN--\":7:18   */\n      lt\n        /* \"--CODEGEN--\":4:6   */\n      iszero\n      tag_24\n      jumpi\n        /* \"--CODEGEN--\":31:32   */\n      0x00\n        /* \"--CODEGEN--\":28:29   */\n      dup1\n        /* \"--CODEGEN--\":21:33   */\n      revert\n        /* \"--CODEGEN--\":4:6   */\n    tag_24:\n        /* \"security/etheranut/Fallout/Fallout.sol\":930:1053  function allocatorBalance(address allocator) public view returns (uint256) {\r... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_25\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"security/etheranut/Fallout/Fallout.sol\":280:392  function Fal1out() public payable {\r... */\n    tag_9:\n        /* \"security/etheranut/Fallout/Fallout.sol\":333:343  msg.sender */\n      caller\n        /* \"security/etheranut/Fallout/Fallout.sol\":325:330  owner */\n      0x01\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":325:343  owner = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"security/etheranut/Fallout/Fallout.sol\":375:384  msg.value */\n      callvalue\n        /* \"security/etheranut/Fallout/Fallout.sol\":354:365  allocations */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":354:372  allocations[owner] */\n      dup1\n        /* \"security/etheranut/Fallout/Fallout.sol\":366:371  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"security/etheranut/Fallout/Fallout.sol\":354:372  allocations[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"security/etheranut/Fallout/Fallout.sol\":354:384  allocations[owner] = msg.value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"security/etheranut/Fallout/Fallout.sol\":280:392  function Fal1out() public payable {\r... */\n      jump\t// out\n        /* \"security/etheranut/Fallout/Fallout.sol\":814:922  function collectAllocations() public onlyOwner {\r... */\n    tag_12:\n        /* \"security/etheranut/Fallout/Fallout.sol\":454:459  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"security/etheranut/Fallout/Fallout.sol\":440:459  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"security/etheranut/Fallout/Fallout.sol\":440:450  msg.sender */\n      caller\n        /* \"security/etheranut/Fallout/Fallout.sol\":440:459  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"security/etheranut/Fallout/Fallout.sol\":432:487  require(msg.sender == owner, \"caller is not the owner\") */\n      tag_28\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x17\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x63616c6c6572206973206e6f7420746865206f776e6572000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_28:\n        /* \"security/etheranut/Fallout/Fallout.sol\":872:882  msg.sender */\n      caller\n        /* \"security/etheranut/Fallout/Fallout.sol\":872:891  msg.sender.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"security/etheranut/Fallout/Fallout.sol\":872:914  msg.sender.transfer(address(this).balance) */\n      0x08fc\n        /* \"security/etheranut/Fallout/Fallout.sol\":892:913  address(this).balance */\n      selfbalance\n        /* \"security/etheranut/Fallout/Fallout.sol\":872:914  msg.sender.transfer(address(this).balance) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_31\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_31:\n        /* \"security/etheranut/Fallout/Fallout.sol\":872:914  msg.sender.transfer(address(this).balance) */\n      pop\n        /* \"security/etheranut/Fallout/Fallout.sol\":814:922  function collectAllocations() public onlyOwner {\r... */\n      jump\t// out\n        /* \"security/etheranut/Fallout/Fallout.sol\":220:248  address payable public owner */\n    tag_15:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"security/etheranut/Fallout/Fallout.sol\":641:806  function sendAllocation(address payable allocator) public {\r... */\n    tag_19:\n        /* \"security/etheranut/Fallout/Fallout.sol\":743:744  0 */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":718:729  allocations */\n      dup1\n        /* \"security/etheranut/Fallout/Fallout.sol\":718:740  allocations[allocator] */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":730:739  allocator */\n      dup4\n        /* \"security/etheranut/Fallout/Fallout.sol\":718:740  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"security/etheranut/Fallout/Fallout.sol\":718:744  allocations[allocator] > 0 */\n      gt\n        /* \"security/etheranut/Fallout/Fallout.sol\":710:745  require(allocations[allocator] > 0) */\n      tag_33\n      jumpi\n        /* \"--CODEGEN--\":12:13   */\n      0x00\n        /* \"--CODEGEN--\":9:10   */\n      dup1\n        /* \"--CODEGEN--\":2:14   */\n      revert\n        /* \"security/etheranut/Fallout/Fallout.sol\":710:745  require(allocations[allocator] > 0) */\n    tag_33:\n        /* \"security/etheranut/Fallout/Fallout.sol\":756:765  allocator */\n      dup1\n        /* \"security/etheranut/Fallout/Fallout.sol\":756:774  allocator.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"security/etheranut/Fallout/Fallout.sol\":756:798  allocator.transfer(allocations[allocator]) */\n      0x08fc\n        /* \"security/etheranut/Fallout/Fallout.sol\":775:786  allocations */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":775:797  allocations[allocator] */\n      dup1\n        /* \"security/etheranut/Fallout/Fallout.sol\":787:796  allocator */\n      dup5\n        /* \"security/etheranut/Fallout/Fallout.sol\":775:797  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"security/etheranut/Fallout/Fallout.sol\":756:798  allocator.transfer(allocations[allocator]) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_35\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_35:\n        /* \"security/etheranut/Fallout/Fallout.sol\":756:798  allocator.transfer(allocations[allocator]) */\n      pop\n        /* \"security/etheranut/Fallout/Fallout.sol\":641:806  function sendAllocation(address payable allocator) public {\r... */\n      pop\n      jump\t// out\n        /* \"security/etheranut/Fallout/Fallout.sol\":515:633  function allocate() public payable {\r... */\n    tag_21:\n        /* \"security/etheranut/Fallout/Fallout.sol\":587:625  allocations[msg.sender].add(msg.value) */\n      tag_37\n        /* \"security/etheranut/Fallout/Fallout.sol\":615:624  msg.value */\n      callvalue\n        /* \"security/etheranut/Fallout/Fallout.sol\":587:598  allocations */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":587:610  allocations[msg.sender] */\n      dup1\n        /* \"security/etheranut/Fallout/Fallout.sol\":599:609  msg.sender */\n      caller\n        /* \"security/etheranut/Fallout/Fallout.sol\":587:610  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"security/etheranut/Fallout/Fallout.sol\":587:614  allocations[msg.sender].add */\n      tag_38\n      swap1\n        /* \"security/etheranut/Fallout/Fallout.sol\":587:625  allocations[msg.sender].add(msg.value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_37:\n        /* \"security/etheranut/Fallout/Fallout.sol\":561:572  allocations */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":561:584  allocations[msg.sender] */\n      dup1\n        /* \"security/etheranut/Fallout/Fallout.sol\":573:583  msg.sender */\n      caller\n        /* \"security/etheranut/Fallout/Fallout.sol\":561:584  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"security/etheranut/Fallout/Fallout.sol\":561:625  allocations[msg.sender] = allocations[msg.sender].add(msg.value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"security/etheranut/Fallout/Fallout.sol\":515:633  function allocate() public payable {\r... */\n      jump\t// out\n        /* \"security/etheranut/Fallout/Fallout.sol\":930:1053  function allocatorBalance(address allocator) public view returns (uint256) {\r... */\n    tag_25:\n        /* \"security/etheranut/Fallout/Fallout.sol\":996:1003  uint256 */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":1023:1034  allocations */\n      dup1\n        /* \"security/etheranut/Fallout/Fallout.sol\":1023:1045  allocations[allocator] */\n      0x00\n        /* \"security/etheranut/Fallout/Fallout.sol\":1035:1044  allocator */\n      dup4\n        /* \"security/etheranut/Fallout/Fallout.sol\":1023:1045  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"security/etheranut/Fallout/Fallout.sol\":1016:1045  return allocations[allocator] */\n      swap1\n      pop\n        /* \"security/etheranut/Fallout/Fallout.sol\":930:1053  function allocatorBalance(address allocator) public view returns (uint256) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2767:2776  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2783:2784  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2779:2780  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2779:2784  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2767:2784  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2807:2808  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2802:2803  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2802:2808  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_41\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_41:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2857:2858  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2850:2858  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122041cf63bd4f8c4744ec16715980b3491af4681cbb8a45971d3f0fca96399ef06064736f6c63430006040033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506105da806100206000396000f3fe6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100d2578063abaa991614610123578063ffd40b561461012d575b600080fd5b610062610192565b005b34801561007057600080fd5b5061007961023a565b005b34801561008757600080fd5b50610090610346565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100de57600080fd5b50610121600480360360208110156100f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061036c565b005b61012b61043f565b005b34801561013957600080fd5b5061017c6004803603602081101561015057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104d4565b6040518082815260200191505060405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610343573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103b757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561043b573d6000803e3d6000fd5b5050565b610490346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051c90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea264697066735822122041cf63bd4f8c4744ec16715980b3491af4681cbb8a45971d3f0fca96399ef06064736f6c63430006040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DA DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x192 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x23A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x36C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12B PUSH2 0x43F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x343 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x43B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x490 CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x51C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x59A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0xCF PUSH4 0xBD4F8C47 DIFFICULTY 0xEC AND PUSH18 0x5980B3491AF4681CBB8A45971D3F0FCA9639 SWAP15 CREATE PUSH1 0x64 PUSH20 0x6F6C634300060400330000000000000000000000 ",
							"sourceMap": "115:941:1:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;115:941:1;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100d2578063abaa991614610123578063ffd40b561461012d575b600080fd5b610062610192565b005b34801561007057600080fd5b5061007961023a565b005b34801561008757600080fd5b50610090610346565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100de57600080fd5b50610121600480360360208110156100f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061036c565b005b61012b61043f565b005b34801561013957600080fd5b5061017c6004803603602081101561015057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104d4565b6040518082815260200191505060405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610343573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103b757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561043b573d6000803e3d6000fd5b5050565b610490346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051c90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea264697066735822122041cf63bd4f8c4744ec16715980b3491af4681cbb8a45971d3f0fca96399ef06064736f6c63430006040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x192 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x23A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x36C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12B PUSH2 0x43F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x343 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x43B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x490 CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x51C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x59A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0xCF PUSH4 0xBD4F8C47 DIFFICULTY 0xEC AND PUSH18 0x5980B3491AF4681CBB8A45971D3F0FCA9639 SWAP15 CREATE PUSH1 0x64 PUSH20 0x6F6C634300060400330000000000000000000000 ",
							"sourceMap": "115:941:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;280:112:1;;;:::i;:::-;;814:108;;5:9:-1;2:2;;;27:1;24;17:12;2:2;814:108:1;;;:::i;:::-;;220:28;;5:9:-1;2:2;;;27:1;24;17:12;2:2;220:28:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;641:165;;5:9:-1;2:2;;;27:1;24;17:12;2:2;641:165:1;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;641:165:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;515:118;;;:::i;:::-;;930:123;;5:9:-1;2:2;;;27:1;24;17:12;2:2;930:123:1;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;930:123:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;280:112;333:10;325:5;;:18;;;;;;;;;;;;;;;;;;375:9;354:11;:18;366:5;;;;;;;;;;;354:18;;;;;;;;;;;;;;;:30;;;;280:112::o;814:108::-;454:5;;;;;;;;;;;440:19;;:10;:19;;;432:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:10:::1;:19;;:42;892:21;872:42;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;872:42:1;814:108::o:0;220:28::-;;;;;;;;;;;;;:::o;641:165::-;743:1;718:11;:22;730:9;718:22;;;;;;;;;;;;;;;;:26;710:35;;12:1:-1;9;2:12;710:35:1;756:9;:18;;:42;775:11;:22;787:9;775:22;;;;;;;;;;;;;;;;756:42;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;756:42:1;641:165;:::o;515:118::-;587:38;615:9;587:11;:23;599:10;587:23;;;;;;;;;;;;;;;;:27;;:38;;;;:::i;:::-;561:11;:23;573:10;561:23;;;;;;;;;;;;;;;:64;;;;515:118::o;930:123::-;996:7;1023:11;:22;1035:9;1023:22;;;;;;;;;;;;;;;;1016:29;;930:123;;;:::o;2690:175:0:-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "299600",
								"executionCost": "337",
								"totalCost": "299937"
							},
							"external": {
								"Fal1out()": "41903",
								"allocate()": "infinite",
								"allocatorBalance(address)": "1284",
								"collectAllocations()": "infinite",
								"owner()": "1075",
								"sendAllocation(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 115,
									"end": 1056,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 5,
									"end": 14,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 2,
									"end": 4,
									"name": "ISZERO",
									"source": -1
								},
								{
									"begin": 2,
									"end": 4,
									"name": "PUSH [tag]",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "JUMPI",
									"source": -1
								},
								{
									"begin": 27,
									"end": 28,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 24,
									"end": 25,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 17,
									"end": 29,
									"name": "REVERT",
									"source": -1
								},
								{
									"begin": 2,
									"end": 4,
									"name": "tag",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 115,
									"end": 1056,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122041cf63bd4f8c4744ec16715980b3491af4681cbb8a45971d3f0fca96399ef06064736f6c63430006040033",
									".code": [
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "6FAB5DDF"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "8AA96F38"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "8DA5CB5B"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "A2DEA26F"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "ABAA9916"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH",
											"source": 1,
											"value": "FFD40B56"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 115,
											"end": 1056,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12,
											"end": 13,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9,
											"end": 10,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 14,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 280,
											"end": 392,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 280,
											"end": 392,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 392,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 280,
											"end": 392,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 280,
											"end": 392,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 280,
											"end": 392,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 280,
											"end": 392,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 392,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 814,
											"end": 922,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 814,
											"end": 922,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 814,
											"end": 922,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 5,
											"end": 14,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "10"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 27,
											"end": 28,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 24,
											"end": 25,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 17,
											"end": 29,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"source": -1,
											"value": "10"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 814,
											"end": 922,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 814,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 814,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 814,
											"end": 922,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 814,
											"end": 922,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 814,
											"end": 922,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 814,
											"end": 922,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 5,
											"end": 14,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "13"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 27,
											"end": 28,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 24,
											"end": 25,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 17,
											"end": 29,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"source": -1,
											"value": "13"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 5,
											"end": 14,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "16"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 27,
											"end": 28,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 24,
											"end": 25,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 17,
											"end": 29,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"source": -1,
											"value": "16"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 15,
											"end": 17,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 10,
											"end": 13,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 7,
											"end": 18,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 4,
											"end": 6,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 4,
											"end": 6,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "18"
										},
										{
											"begin": 4,
											"end": 6,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 31,
											"end": 32,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 28,
											"end": 29,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 21,
											"end": 33,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 4,
											"end": 6,
											"name": "tag",
											"source": -1,
											"value": "18"
										},
										{
											"begin": 4,
											"end": 6,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 515,
											"end": 633,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 515,
											"end": 633,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 515,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 515,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 515,
											"end": 633,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 515,
											"end": 633,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 515,
											"end": 633,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 515,
											"end": 633,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 5,
											"end": 14,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "22"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 27,
											"end": 28,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 24,
											"end": 25,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 17,
											"end": 29,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"source": -1,
											"value": "22"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 15,
											"end": 17,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": 10,
											"end": 13,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 7,
											"end": 18,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 4,
											"end": 6,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 4,
											"end": 6,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "24"
										},
										{
											"begin": 4,
											"end": 6,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 31,
											"end": 32,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 28,
											"end": 29,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 21,
											"end": 33,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 4,
											"end": 6,
											"name": "tag",
											"source": -1,
											"value": "24"
										},
										{
											"begin": 4,
											"end": 6,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 280,
											"end": 392,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 280,
											"end": 392,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 333,
											"end": 343,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 325,
											"end": 330,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 325,
											"end": 330,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 325,
											"end": 343,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 325,
											"end": 343,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 325,
											"end": 343,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 325,
											"end": 343,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 325,
											"end": 343,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 375,
											"end": 384,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 354,
											"end": 365,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 354,
											"end": 372,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 366,
											"end": 371,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 366,
											"end": 371,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 366,
											"end": 371,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 366,
											"end": 371,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 366,
											"end": 371,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 366,
											"end": 371,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 366,
											"end": 371,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 366,
											"end": 371,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 366,
											"end": 371,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 366,
											"end": 371,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 366,
											"end": 371,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 354,
											"end": 372,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 354,
											"end": 372,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 354,
											"end": 372,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 354,
											"end": 372,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 354,
											"end": 372,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 354,
											"end": 372,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 354,
											"end": 384,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 354,
											"end": 384,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 354,
											"end": 384,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 354,
											"end": 384,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 392,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 814,
											"end": 922,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 814,
											"end": 922,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 454,
											"end": 459,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 454,
											"end": 459,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 454,
											"end": 459,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 454,
											"end": 459,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 454,
											"end": 459,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 454,
											"end": 459,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 454,
											"end": 459,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 454,
											"end": 459,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 454,
											"end": 459,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 454,
											"end": 459,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 454,
											"end": 459,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 440,
											"end": 459,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 440,
											"end": 459,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 440,
											"end": 450,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 440,
											"end": 459,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 440,
											"end": 459,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 440,
											"end": 459,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "63616C6C6572206973206E6F7420746865206F776E6572000000000000000000"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 432,
											"end": 487,
											"name": "tag",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 432,
											"end": 487,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 872,
											"end": 882,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 872,
											"end": 891,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 872,
											"end": 891,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "PUSH",
											"source": 1,
											"value": "8FC"
										},
										{
											"begin": 892,
											"end": 913,
											"name": "SELFBALANCE",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 872,
											"end": 914,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 872,
											"end": 914,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 872,
											"end": 914,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "31"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE",
											"source": -1
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY",
											"source": -1
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE",
											"source": -1
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"source": -1,
											"value": "31"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 872,
											"end": 914,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 814,
											"end": 922,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 220,
											"end": 248,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 220,
											"end": 248,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 641,
											"end": 806,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 743,
											"end": 744,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 718,
											"end": 729,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 730,
											"end": 739,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 718,
											"end": 740,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 718,
											"end": 740,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 718,
											"end": 740,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 718,
											"end": 740,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 718,
											"end": 740,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 718,
											"end": 740,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 718,
											"end": 744,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 710,
											"end": 745,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 710,
											"end": 745,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 12,
											"end": 13,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9,
											"end": 10,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 14,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 710,
											"end": 745,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 710,
											"end": 745,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 756,
											"end": 765,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 756,
											"end": 774,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 756,
											"end": 774,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "PUSH",
											"source": 1,
											"value": "8FC"
										},
										{
											"begin": 775,
											"end": 786,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 797,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 787,
											"end": 796,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 775,
											"end": 797,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 775,
											"end": 797,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 775,
											"end": 797,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 775,
											"end": 797,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 797,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 775,
											"end": 797,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 756,
											"end": 798,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 756,
											"end": 798,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 756,
											"end": 798,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "35"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE",
											"source": -1
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY",
											"source": -1
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE",
											"source": -1
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"source": -1,
											"value": "35"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 756,
											"end": 798,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 641,
											"end": 806,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 515,
											"end": 633,
											"name": "tag",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 515,
											"end": 633,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 587,
											"end": 625,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 615,
											"end": 624,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 587,
											"end": 598,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 587,
											"end": 610,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 599,
											"end": 609,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 587,
											"end": 610,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 587,
											"end": 610,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 587,
											"end": 610,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 587,
											"end": 610,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 587,
											"end": 610,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 587,
											"end": 610,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 587,
											"end": 614,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 587,
											"end": 614,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 587,
											"end": 625,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 587,
											"end": 625,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 587,
											"end": 625,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 587,
											"end": 625,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 587,
											"end": 625,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 587,
											"end": 625,
											"name": "tag",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 587,
											"end": 625,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 561,
											"end": 572,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 573,
											"end": 583,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 561,
											"end": 625,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 561,
											"end": 625,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 561,
											"end": 625,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 561,
											"end": 625,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 515,
											"end": 633,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 996,
											"end": 1003,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1023,
											"end": 1034,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1035,
											"end": 1044,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1016,
											"end": 1045,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1016,
											"end": 1045,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 930,
											"end": 1053,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2767,
											"end": 2776,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2783,
											"end": 2784,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2780,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2808,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2802,
											"end": 2803,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2857,
											"end": 2858,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Fal1out()": "6fab5ddf",
							"allocate()": "abaa9916",
							"allocatorBalance(address)": "ffd40b56",
							"collectAllocations()": "8aa96f38",
							"owner()": "8da5cb5b",
							"sendAllocation(address)": "a2dea26f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.4+commit.1dca32f3\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Fal1out\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"allocatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"sendAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"security/etheranut/Fallout/Fallout.sol\":\"Fallout\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"security/etheranut/Fallout/Fallout.sol\":{\"keccak256\":\"0x0a8a691ba72b0bd657f5f08b48398118d8cb5017bec7449b9a27cd46dbd14a44\",\"urls\":[\"bzz-raw://3a4b141e51577fb41817ea5689a2bbb855c91130b8ad907157ce6b4d4a60eff5\",\"dweb:/ipfs/QmQTxZNTBTMuEy1WAKv2fXWHvavimKhfPu1HP6ipob9Fwm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 364,
								"contract": "security/etheranut/Fallout/Fallout.sol:Fallout",
								"label": "allocations",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 366,
								"contract": "security/etheranut/Fallout/Fallout.sol:Fallout",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							354
						]
					},
					"id": 355,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:0",
								"text": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 354,
							"linearizedBaseContracts": [
								354
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 32,
										"nodeType": "Block",
										"src": "865:98:0",
										"statements": [
											{
												"assignments": [
													15
												],
												"declarations": [
													{
														"constant": false,
														"id": 15,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 32,
														"src": "875:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 14,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 19,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 18,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 16,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "887:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 17,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "891:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 20,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "906:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 21,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "910:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 27,
												"nodeType": "IfStatement",
												"src": "902:28:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 25,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 13,
													"id": 26,
													"nodeType": "Return",
													"src": "913:17:0"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 28,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 29,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "954:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 30,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 13,
												"id": 31,
												"nodeType": "Return",
												"src": "940:16:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "653:131:0",
										"text": "@dev Returns the addition of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._"
									},
									"id": 33,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 33,
												"src": "805:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 33,
												"src": "816:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "804:22:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 33,
												"src": "850:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 33,
												"src": "856:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "849:15:0"
									},
									"scope": 354,
									"src": "789:174:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1185:75:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 45,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "1199:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"id": 46,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 36,
														"src": "1203:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 52,
												"nodeType": "IfStatement",
												"src": "1195:28:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 49,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 50,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 44,
													"id": 51,
													"nodeType": "Return",
													"src": "1206:17:0"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 54,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 36,
																"src": "1247:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"argumentTypes": null,
																"id": 55,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 38,
																"src": "1251:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 57,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 44,
												"id": 58,
												"nodeType": "Return",
												"src": "1233:20:0"
											}
										]
									},
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "969:135:0",
										"text": "@dev Returns the substraction of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._"
									},
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 60,
												"src": "1125:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 60,
												"src": "1136:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1124:22:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 60,
												"src": "1170:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 40,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 43,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 60,
												"src": "1176:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1169:15:0"
									},
									"scope": 354,
									"src": "1109:151:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 100,
										"nodeType": "Block",
										"src": "1484:359:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 72,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 63,
														"src": "1716:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 73,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 79,
												"nodeType": "IfStatement",
												"src": "1712:28:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 77,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 71,
													"id": 78,
													"nodeType": "Return",
													"src": "1724:16:0"
												}
											},
											{
												"assignments": [
													81
												],
												"declarations": [
													{
														"constant": false,
														"id": 81,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 100,
														"src": "1750:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 80,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 85,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 82,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 63,
														"src": "1762:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 83,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "1766:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 88,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 86,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "1781:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"argumentTypes": null,
															"id": 87,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "1785:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 89,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "1790:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 95,
												"nodeType": "IfStatement",
												"src": "1777:33:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 91,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 93,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 71,
													"id": 94,
													"nodeType": "Return",
													"src": "1793:17:0"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 97,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "1834:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 98,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 71,
												"id": 99,
												"nodeType": "Return",
												"src": "1820:16:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1266:137:0",
										"text": "@dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._"
									},
									"id": 101,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 101,
												"src": "1424:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 62,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 101,
												"src": "1435:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1423:22:0"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 68,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 101,
												"src": "1469:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 67,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 70,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 101,
												"src": "1475:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 69,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1468:15:0"
									},
									"scope": 354,
									"src": "1408:435:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 127,
										"nodeType": "Block",
										"src": "2068:76:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 113,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 106,
														"src": "2082:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2078:29:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 118,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 112,
													"id": 119,
													"nodeType": "Return",
													"src": "2090:17:0"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 122,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "2131:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"argumentTypes": null,
																"id": 123,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 106,
																"src": "2135:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 125,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 112,
												"id": 126,
												"nodeType": "Return",
												"src": "2117:20:0"
											}
										]
									},
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "1849:138:0",
										"text": "@dev Returns the division of two unsigned integers, with a division by zero flag.\n     * _Available since v3.4._"
									},
									"id": 128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 128,
												"src": "2008:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 128,
												"src": "2019:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2007:22:0"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 128,
												"src": "2053:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 111,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 128,
												"src": "2059:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2052:15:0"
									},
									"scope": 354,
									"src": "1992:152:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 154,
										"nodeType": "Block",
										"src": "2379:76:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 140,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "2393:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 141,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 147,
												"nodeType": "IfStatement",
												"src": "2389:29:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 143,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 144,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 145,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 139,
													"id": 146,
													"nodeType": "Return",
													"src": "2401:17:0"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 149,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 131,
																"src": "2442:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"argumentTypes": null,
																"id": 150,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "2446:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 152,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 139,
												"id": 153,
												"nodeType": "Return",
												"src": "2428:20:0"
											}
										]
									},
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "2150:148:0",
										"text": "@dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     * _Available since v3.4._"
									},
									"id": 155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 155,
												"src": "2319:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 155,
												"src": "2330:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2318:22:0"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 155,
												"src": "2364:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 135,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 155,
												"src": "2370:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2363:15:0"
									},
									"scope": 354,
									"src": "2303:152:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 180,
										"nodeType": "Block",
										"src": "2757:108:0",
										"statements": [
											{
												"assignments": [
													166
												],
												"declarations": [
													{
														"constant": false,
														"id": 166,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 180,
														"src": "2767:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 165,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 170,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 167,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 158,
														"src": "2779:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 168,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 160,
														"src": "2783:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 172,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "2802:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 173,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 158,
																"src": "2807:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 171,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2794:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 178,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 166,
													"src": "2857:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 164,
												"id": 179,
												"nodeType": "Return",
												"src": "2850:8:0"
											}
										]
									},
									"documentation": {
										"id": 156,
										"nodeType": "StructuredDocumentation",
										"src": "2461:224:0",
										"text": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n     * - Addition cannot overflow."
									},
									"id": 181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 181,
												"src": "2703:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 181,
												"src": "2714:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2702:22:0"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 181,
												"src": "2748:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2747:9:0"
									},
									"scope": 354,
									"src": "2690:175:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 202,
										"nodeType": "Block",
										"src": "3203:88:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 192,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 186,
																"src": "3221:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 193,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 184,
																"src": "3226:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 195,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 191,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3213:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 197,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 198,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 184,
														"src": "3279:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 199,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 186,
														"src": "3283:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 190,
												"id": 201,
												"nodeType": "Return",
												"src": "3272:12:0"
											}
										]
									},
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "2871:260:0",
										"text": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow."
									},
									"id": 203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 203,
												"src": "3149:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 203,
												"src": "3160:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3148:22:0"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 203,
												"src": "3194:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3193:9:0"
									},
									"scope": 354,
									"src": "3136:155:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "3605:148:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 213,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 206,
														"src": "3619:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 214,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 218,
												"nodeType": "IfStatement",
												"src": "3615:20:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 216,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 212,
													"id": 217,
													"nodeType": "Return",
													"src": "3627:8:0"
												}
											},
											{
												"assignments": [
													220
												],
												"declarations": [
													{
														"constant": false,
														"id": 220,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 236,
														"src": "3645:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 219,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 224,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 221,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 206,
														"src": "3657:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 222,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "3661:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 228,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 226,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 220,
																	"src": "3680:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 227,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 206,
																	"src": "3684:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 229,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 208,
																"src": "3689:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 231,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 225,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3672:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 233,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 234,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 220,
													"src": "3745:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 212,
												"id": 235,
												"nodeType": "Return",
												"src": "3738:8:0"
											}
										]
									},
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "3297:236:0",
										"text": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n     * - Multiplication cannot overflow."
									},
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 237,
												"src": "3551:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 237,
												"src": "3562:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3550:22:0"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 237,
												"src": "3596:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3595:9:0"
									},
									"scope": 354,
									"src": "3538:215:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 258,
										"nodeType": "Block",
										"src": "4284:83:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 248,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 242,
																"src": "4302:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 249,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4294:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 253,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 254,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 240,
														"src": "4355:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 255,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 242,
														"src": "4359:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 246,
												"id": 257,
												"nodeType": "Return",
												"src": "4348:12:0"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "3759:453:0",
										"text": "@dev Returns the integer division of two unsigned integers, reverting on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."
									},
									"id": 259,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 259,
												"src": "4230:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 259,
												"src": "4241:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4229:22:0"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 259,
												"src": "4275:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4274:9:0"
									},
									"scope": 354,
									"src": "4217:150:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "4887:81:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 270,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 264,
																"src": "4905:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 269,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4897:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 276,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 262,
														"src": "4956:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 277,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "4960:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 268,
												"id": 279,
												"nodeType": "Return",
												"src": "4949:12:0"
											}
										]
									},
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "4373:442:0",
										"text": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nreverting when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "4833:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "4844:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 263,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4832:22:0"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "4878:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4877:9:0"
									},
									"scope": 354,
									"src": "4820:148:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "5527:68:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 294,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 286,
																"src": "5545:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 295,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 284,
																"src": "5550:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 297,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "5553:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 293,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5537:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 299,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 300,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 284,
														"src": "5583:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 301,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "5587:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 292,
												"id": 303,
												"nodeType": "Return",
												"src": "5576:12:0"
											}
										]
									},
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "4974:453:0",
										"text": "@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {trySub}.\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow."
									},
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5445:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5456:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5467:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5444:50:0"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5518:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5517:9:0"
									},
									"scope": 354,
									"src": "5432:163:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 328,
										"nodeType": "Block",
										"src": "6347:67:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 318,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 310,
																"src": "6365:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 319,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6369:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6365:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 321,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 312,
															"src": "6372:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 317,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6357:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6357:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "6357:28:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 324,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "6402:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 325,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 310,
														"src": "6406:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6402:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 316,
												"id": 327,
												"nodeType": "Return",
												"src": "6395:12:0"
											}
										]
									},
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "5601:646:0",
										"text": "@dev Returns the integer division of two unsigned integers, reverting with custom message on\ndivision by zero. The result is rounded towards zero.\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {tryDiv}.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."
									},
									"id": 329,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 329,
												"src": "6265:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6265:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 329,
												"src": "6276:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 329,
												"src": "6287:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 311,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6287:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6264:50:0"
									},
									"returnParameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 329,
												"src": "6338:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6338:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6337:9:0"
									},
									"scope": 354,
									"src": "6252:162:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 352,
										"nodeType": "Block",
										"src": "7155:67:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 342,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 334,
																"src": "7173:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7177:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7173:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 345,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "7180:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 341,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7165:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "7165:28:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 348,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 332,
														"src": "7210:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 349,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 334,
														"src": "7214:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7210:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 340,
												"id": 351,
												"nodeType": "Return",
												"src": "7203:12:0"
											}
										]
									},
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "6420:635:0",
										"text": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nreverting with custom message when dividing by zero.\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {tryMod}.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."
									},
									"id": 353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 353,
												"src": "7073:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7073:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 353,
												"src": "7084:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 353,
												"src": "7095:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 335,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7072:50:0"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 353,
												"src": "7146:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7145:9:0"
									},
									"scope": 354,
									"src": "7060:162:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 355,
							"src": "630:6594:0"
						}
					],
					"src": "33:7192:0"
				},
				"id": 0
			},
			"security/etheranut/Fallout/Fallout.sol": {
				"ast": {
					"absolutePath": "security/etheranut/Fallout/Fallout.sol",
					"exportedSymbols": {
						"Fallout": [
							465
						]
					},
					"id": 466,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 356,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/math/SafeMath.sol",
							"id": 357,
							"nodeType": "ImportDirective",
							"scope": 466,
							"sourceUnit": 355,
							"src": "60:51:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 465,
							"linearizedBaseContracts": [
								465
							],
							"name": "Fallout",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 360,
									"libraryName": {
										"contractScope": null,
										"id": 358,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 354,
										"src": "145:8:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$354",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "139:27:1",
									"typeName": {
										"id": 359,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "158:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 364,
									"name": "allocations",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 465,
									"src": "174:39:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 363,
										"keyType": {
											"id": 361,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "182:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "174:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 362,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "193:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 366,
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 465,
									"src": "220:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 365,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "220:15:1",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "314:78:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 369,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 366,
														"src": "325:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 370,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "333:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 371,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "333:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "325:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 373,
												"nodeType": "ExpressionStatement",
												"src": "325:18:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 374,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "354:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 376,
														"indexExpression": {
															"argumentTypes": null,
															"id": 375,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 366,
															"src": "366:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "354:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 377,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "375:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "375:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "354:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "354:30:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "6fab5ddf",
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Fal1out",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "296:2:1"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "314:0:1"
									},
									"scope": 465,
									"src": "280:112:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 393,
										"nodeType": "Block",
										"src": "421:86:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															"id": 388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 385,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "440:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 386,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "440:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 387,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "454:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "440:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "63616c6c6572206973206e6f7420746865206f776e6572",
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "461:25:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															},
															"value": "caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															}
														],
														"id": 384,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "432:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "432:55:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 391,
												"nodeType": "ExpressionStatement",
												"src": "432:55:1"
											},
											{
												"id": 392,
												"nodeType": "PlaceholderStatement",
												"src": "498:1:1"
											}
										]
									},
									"documentation": null,
									"id": 394,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "418:2:1"
									},
									"src": "400:107:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "550:83:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 397,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "561:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 400,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 398,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "573:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 399,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "573:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "561:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 406,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "615:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 407,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "615:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 401,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "587:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 404,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 402,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "599:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "599:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "587:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "587:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "587:38:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "561:64:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 410,
												"nodeType": "ExpressionStatement",
												"src": "561:64:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "abaa9916",
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "532:2:1"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "550:0:1"
									},
									"scope": 465,
									"src": "515:118:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "699:107:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 418,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "718:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 420,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 419,
																	"name": "allocator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "730:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "718:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 421,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "743:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "718:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 417,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "710:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "710:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "710:35:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 428,
																"name": "allocations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 364,
																"src": "775:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 430,
															"indexExpression": {
																"argumentTypes": null,
																"id": 429,
																"name": "allocator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "787:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "775:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 425,
															"name": "allocator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "756:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 427,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "756:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "756:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 432,
												"nodeType": "ExpressionStatement",
												"src": "756:42:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "a2dea26f",
									"id": 434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendAllocation",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 414,
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 434,
												"src": "665:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "665:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "664:27:1"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "699:0:1"
									},
									"scope": 465,
									"src": "641:165:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 451,
										"nodeType": "Block",
										"src": "861:61:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 446,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -28,
																		"src": "900:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Fallout_$465",
																			"typeString": "contract Fallout"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Fallout_$465",
																			"typeString": "contract Fallout"
																		}
																	],
																	"id": 445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "892:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 444,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "892:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "892:13:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "892:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 439,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "872:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "872:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 443,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "872:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "872:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "872:42:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "8aa96f38",
									"id": 452,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 437,
											"modifierName": {
												"argumentTypes": null,
												"id": 436,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 394,
												"src": "851:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "851:9:1"
										}
									],
									"name": "collectAllocations",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "841:2:1"
									},
									"returnParameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "861:0:1"
									},
									"scope": 465,
									"src": "814:108:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "1005:48:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 459,
														"name": "allocations",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 364,
														"src": "1023:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 461,
													"indexExpression": {
														"argumentTypes": null,
														"id": 460,
														"name": "allocator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "1035:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1023:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 458,
												"id": 462,
												"nodeType": "Return",
												"src": "1016:29:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "ffd40b56",
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocatorBalance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "956:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "956:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "955:19:1"
									},
									"returnParameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "996:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "996:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "995:9:1"
									},
									"scope": 465,
									"src": "930:123:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 466,
							"src": "115:941:1"
						}
					],
					"src": "33:1023:1"
				},
				"id": 1
			}
		}
	}
}